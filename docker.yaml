# This example requires Lima v0.8.0 or later
images:
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
  arch: "aarch64"

cpus: 4
memory: "10GiB"

networks:
  - lima: user-v2
  - lima: shared
    macAddress: de:ad:be:ef:00:01

mounts:
- location: "~"
  writable: true
- location: "/tmp/lima"
  writable: true
# containerd is managed by Docker, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false
provision:
- mode: system
  # This script defines the host.docker.internal hostname when hostResolver is disabled.
  # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
  # Names defined in /etc/hosts inside the VM are not resolved inside containers when
  # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
  script: |
    #!/bin/sh
    sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail
    command -v docker >/dev/null 2>&1 && exit 0
    export DEBIAN_FRONTEND=noninteractive
    curl -fsSL https://get.docker.com | sh
    # install binfmt
    apt install qemu binfmt-support qemu-user-static
    # docker run --privileged --rm tonistiigi/binfmt --install all
- mode: system
  script: |
    # hack to make ssh port forward able to access docker
    chmod 777 /var/run/docker.sock
- mode: system
  script: |
    # hit max FDs sometimes with KIND
    sysctl fs.inotify.max_user_instances=1280
    sysctl fs.inotify.max_user_watches=655360
- mode: system
  script: |
    #!/bin/sh
    set -e

    # needed for cilium
    mount bpffs -t bpf /sys/fs/bpf
    mount --make-shared /sys/fs/bpf
    mount --make-shared /sys/fs/cgroup
- mode: system
  script: |
    # for kitty terminal
    echo 'Defaults env_keep += "TERM TERMINFO"' > /etc/sudoers.d/preserve-terminfo
- mode: system
  script: |
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl

    # kubernetes key and repo
    sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    # helm key and report
    curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list

    # install kubectl and helm
    apt-get update
    apt-get install -y kubectl helm

    # install KIND
    curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-$(dpkg --print-architecture)
    chmod +x ./kind
    mv ./kind /usr/local/bin/kind

- mode: system
  script: |
    # cilium dev deps
    if [[ -f /.cilium-setup ]]; then
      exit 0
    fi
    apt-get update
    apt-get install -y build-essential make libtinfo5 clang-11

    ln -s /usr/bin/clang-11 /usr/bin/clang
    ln -s /usr/bin/llc-11 /usr/bin/llc

    cd /tmp
    wget https://go.dev/dl/go1.21.4.linux-arm64.tar.gz
    rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.4.linux-arm64.tar.gz

    echo 'export PATH=$PATH:/usr/local/go/bin' >> /home/chancezibolski.linux/.bashrc

    export PATH=$PATH:/usr/local/go/bin
    go install github.com/mattn/goveralls@a36c7ef8f23b2952fa6e39663f52107dfc8ad69d
    go install github.com/mfridman/tparse@28967170dce4f9f13de77ec857f7aed4c4294a5f

    touch /.cilium-setup

probes:
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
      echo >&2 "docker is not installed yet"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest
hostResolver:
  # hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also
  # resolve inside containers, and not just inside the VM itself.
  hosts:
    host.docker.internal: host.lima.internal
portForwards:
- guestPort: 443
- guestPort: 80
- guestSocket: "/var/run/docker.sock"
  hostSocket: "{{.Dir}}/sock/docker.sock"
message: |
  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima
  docker run hello-world
  ------
